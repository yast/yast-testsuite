# YaST2: modules testsuite
#
# Description:
#   Main config file
#
# Author:
#   Michal Svec <msvec@suse.cz>
#
# $Id$

proc testsuite_exit {} {}
proc testsuite_version {} {}

# Run one test

proc testsuite-run { src } {

  set path [split $src "/"]
  set filename [lindex $path [expr [llength $path]-1]]

  # extract basename

  set fname [split $filename "."]

  if {[llength $fname] < 2} {
    fail "Bad filename syntax '$src'"
    return -1
  }

  # setup filenames

  # $src is the name of the original testfile with absolute path
  # tests/$filename is the name of the original testfile with relative path,
  #                 relative to the testsuite directory 
  set test_input  "tests/$filename"

  set base_name [lindex $fname 0]

  set stdout_name "tests/$base_name.out"
  set stderr_name "tests/$base_name.err"
  set log_name    "tests/$base_name.log"
  set tmpout_name "tmp.out.$base_name"
  set tmperr_name "tmp.err.$base_name"
  set tmplog_name "tmp.log.$base_name"

  # fate#2306: enable make check *gasp* before make install
  # by searching in the source directory
  set options ""
  # first hack: look for the usual suspects
  # (next steps: use YCPCFLAGS)
  set sourcedir "../src"
  if {[file isdirectory $sourcedir]} {
      set options "-I $sourcedir -M $sourcedir"
  }

  # skip the file if there is no stderr and stdout file,
  # it is likely just an include file which should not be executed
  if {[expr ![file exists $stderr_name]] && [expr ![file exists $stdout_name]]} {
      puts "Skipping file $fname ..."
      return 0
  }

  puts "Running $base_name ..."

  # run the test

  set result ""
  set oops [catch { set result [exec "run/runtest.sh" $options "$test_input" "$tmpout_name" "$tmperr_name" ] } catched]

  if {$oops != 0} {
    fail "Test case failed for $base_name: $catched"
    return -1
  }

  # check return code from runycp

  if {$result != ""} {
    warning "Compilation of $base_name results in '$result'"
    return -1
  }

  # check stderr

  if {[diff $stderr_name "tmp.err.$base_name"] != 1} {
    fail "Wrong stderr for $base_name"
    set oops [catch { set result [exec test -f $stderr_name] } catched ]
    if {$oops == 0} {
      puts "\nThe diff follows...\n"
      puts [exec sh -c "diff -u $stderr_name tmp.err.$base_name || true"]
      puts ""
      fail "Wrong stderr for $base_name"
      puts "See the diff above."
    }
    return -1
  }

  # check stdout

  if {[diff $stdout_name "tmp.out.$base_name"] != 1} {
    fail "Wrong stdout for $base_name"
    set oops [catch { set result [exec test -f $stdout_name] } catched ]
    if {$oops == 0} {
      puts "\nThe diff follows...\n"
      puts [exec sh -c "diff -u $stdout_name tmp.out.$base_name || true"]
      puts ""
      fail "Wrong stdout for $base_name"
      puts "See the diff above."
    }
    return -1
  }

  # ok, all is fine

  pass $base_name

  return 0
}
